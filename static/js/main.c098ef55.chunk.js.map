{"version":3,"sources":["logo.svg","loading.svg","Button.js","AlbumCover.js","App.js","registerServiceWorker.js","index.js"],"names":["module","exports","Button","props","onClick","children","AlbumCover","mediumImg","track","album","images","src","url","shuffleArray","array","counter","length","index","getRandomNumber","temp","x","Math","floor","random","App","setGameTimeout","console","log","timeout","setTimeout","startNewGame","state","tracks","currentTrackIndex","wrongTrackIndex1","wrongTrackIndex2","setState","currentTrack","shuffledTracks","songsLoaded","clearTimeout","id","swal","then","fetch","method","headers","Authorization","response","json","data","items","this","loading","className","alt","track0","preview_url","playStatus","Sound","status","PLAYING","logo","map","name","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.c098ef55.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.79f6b6a0.svg\";","module.exports = __webpack_public_path__ + \"static/media/loading.9d4cbf40.svg\";","import React from 'react';\nimport './Button.css';\n\nconst Button = (props) => (\n  <button onClick={props.onClick}>{props.children}</button>\n);\n\nexport default Button;\n","import React from \"react\";\n\nexport default function AlbumCover({ track }) {\n  const mediumImg = track.track.album.images[1];\n  return <img src={mediumImg.url}></img>;\n}\n","/*global swal*/\n\nimport React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport loading from \"./loading.svg\";\nimport \"./App.css\";\nimport Sound from \"react-sound\";\nimport Button from \"./Button\";\nimport AlbumCover from \"./AlbumCover\";\n\nconst apiToken =\n  \"BQD20V3kslqP0wTuMC8oDvyD7vHFMJZAHuS45KXkrddLVQXryg17LsScw6exAON0FZyhS5hNUltmRZ0m9p_U3TuMOAMqoj7bOW7cFa1f9B1vz4Swj5tp8qNavCp6kjCn_0rX77_yFIiZu4iPUnkTVifsOfNHILvQYQ\";\n\nfunction shuffleArray(array) {\n  let counter = array.length;\n\n  while (counter > 0) {\n    let index = getRandomNumber(counter);\n    counter--;\n    let temp = array[counter];\n    array[counter] = array[index];\n    array[index] = temp;\n  }\n\n  return array;\n}\n\n/* Return a random number between 0 included and x excluded */\nfunction getRandomNumber(x) {\n  return Math.floor(Math.random() * x);\n}\n\nclass App extends Component {\n  timeout;\n\n  constructor() {\n    super();\n\n    this.timeout = null;\n\n    this.state = {\n      tracks: [],\n      currentTrack: {},\n      shuffledTracks: [],\n      songsLoaded: false\n    };\n  }\n\n  setGameTimeout = () => {\n    console.log(\"Set new timeout\");\n    this.timeout = setTimeout(this.startNewGame, 10000);\n  };\n\n  startNewGame = () => {\n    const length = this.state.tracks.length;\n    const currentTrackIndex = getRandomNumber(length);\n    let wrongTrackIndex1 = getRandomNumber(length);\n    while (wrongTrackIndex1 === currentTrackIndex) {\n      wrongTrackIndex1 = getRandomNumber(length);\n    }\n    let wrongTrackIndex2 = getRandomNumber(length);\n    while (\n      wrongTrackIndex2 === currentTrackIndex ||\n      wrongTrackIndex2 === wrongTrackIndex1\n    ) {\n      wrongTrackIndex2 = getRandomNumber(length);\n    }\n\n    this.setState(() => ({\n      currentTrack: this.state.tracks[currentTrackIndex],\n      shuffledTracks: shuffleArray([\n        this.state.tracks[currentTrackIndex],\n        this.state.tracks[wrongTrackIndex1],\n        this.state.tracks[wrongTrackIndex2]\n      ]),\n      songsLoaded: true\n    }));\n    clearTimeout(this.timeout);\n    this.setGameTimeout();\n  };\n\n  componentDidMount() {\n    fetch(\n      \"\thttps://api.spotify.com/v1/playlists/1wCB2uVwBCIbJA9rar5B77/tracks\",\n      {\n        method: \"GET\",\n        headers: {\n          Authorization: \"Bearer \" + apiToken\n        }\n      }\n    )\n      .then(response => response.json())\n      .then(data => {\n        this.setState(\n          {\n            tracks: data.items\n          },\n          () => {\n            this.startNewGame();\n            this.setGameTimeout();\n          }\n        );\n      });\n  }\n\n  onClick = id => {\n    if (id === this.state.currentTrack.track.id) {\n      return swal(\"T'es trop forte\", \"success\").then(() => {\n        clearTimeout(this.timeout);\n        this.startNewGame();\n      });\n    }\n    swal(\"Loser\");\n  };\n\n  render() {\n    if (!this.state.songsLoaded) {\n      return <img src={loading} className=\"App-loading\" alt=\"loading\" />;\n    }\n\n    const shuffledTracks = this.state.shuffledTracks;\n\n    const track0 = this.state.currentTrack;\n\n    return (\n      <div className=\"App\">\n        <Sound\n          url={track0.track.preview_url}\n          playStatus={Sound.status.PLAYING}\n        />\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <h1 className=\"App-title\">Bienvenue sur le Blindtest</h1>\n        </header>\n        <div className=\"App-images\">\n          <AlbumCover track={track0} />\n        </div>\n        <div className=\"App-buttons\">\n          {shuffledTracks.map(track => (\n            <Button onClick={() => this.onClick(track.track.id)}>\n              {track.track.name}\n            </Button>\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}